use uo;
use os;
use cfgfile;
use cliloc;

include ":attributes:attributes";
include ":magery:spells";
include "include/client";
include "include/objtype";
include ":magery:isValidLoc";
include ":virtue:virtue";

program recall(parms)
  var caster := parms[1];
  var info := parms[2];

  var cast_on := MS_Target(caster, info.targ, "Select a target.", TGTOPT_CHECK_LOS+TGTOPT_NEUTRAL);

    if (!cast_on)
        SendSysMessageCL(caster, 1042023, color := 33); // Cancelled.
        return 0;
    endif
  if((cast_on.objtype != UOBJ_RUNE) && (cast_on.objtype != 0x16100))
    SendSysMessage(caster, "You can only cast that on a recall rune!");
	return;
  endif
  if(!ReserveItem(cast_on))
    SendSysMessageCL(caster, 1042144, color := 33); // This is currently in use.
    return;
  endif
  if(Distance(caster, cast_on) > 2)
      SendSysMessageCL(caster, 501975, color := 33); // That is too far away.
      return 0;
  endif
  if(!Accessible(caster, cast_on))
    SendSysMessageCL(caster, 1078497, color := 33); // You cannot use that right now
    return 0;
  endif
  if((!CheckLosAt(caster, cast_on.x, cast_on.y, cast_on.z) && !cast_on.container))
      SendSysMessageCL(caster, 500876, color := 33); // You can't see that.
      return 0;
  endif
  if(GetObjProperty(cast_on, "Vendored"))
    SendSysMessage(caster, "You cannot recall off of runes on a vendor");
    return;
  endif
  var dest := cast_on.GetDestination(cast_on);
  if(!dest)
	SendSysMessageCL(caster, 501803, color := 33); // That rune is not yet marked.
	return 0;
  endif
  var tox := CInt(dest.x);
  var toy := CInt(dest.y);
  var toz := CInt(dest.z);
  var torealm := dest.realm;
  if (torealm)
        if (torealm != caster.realm)
            SendSysMessageCL(caster, 1005568, color := 33); // You cannot recall to another facet.
            return;
        endif
  endif
  if(!tox)
    SendSysMessageCL(caster, 501803); // That rune is not yet marked.
    return;
  endif
  if(!isValidLoc(tox,toy))
    SendSysMessage(caster, "You may not recall into that area.");
    return;
  endif
  PlaySoundEffect(caster, 0x210);
  Detach();
  var chk := 0;
  // "Dungeon" area check.
  if((caster.x >= 5120) && (caster.x <= 5375) && (caster.y >= 0) && (caster.y <= 255))
    SendSysMessageCL(caster, 501025, color := 33); // Something is blocking the location.
    chk := 1;
  endif
  // Cannot recall into/onto a multi
	var MultiCheck := ListMultisInBox(dest.x, dest.y, dest.z, dest.x, dest.y, dest.z, torealm.realm).size()>0;
  if(multicheck)
    SendSysMessageCL(caster,501025, color := 33); // Something is blocking the location.
    chk := 1;
  endif


// Check for static houses
    var signs := ListItemsNearLocationOfType( tox, toy, toz, 30, 0x160ff);
    foreach item in signs
      var infoarr := GetObjProperty( item, "homeinfo" );
      if (infoarr)
        if ((tox >= infoarr[2]) and (tox <= infoarr[4]) and (toy >= infoarr[3]) and (toy <= infoarr[5]))
          SendSysMessageCL(caster, 501025); // Something is blocking the location.
          return;
        endif
      endif
    endforeach
// End static house check.

  if(chk == 1)
    return;
  endif
	var monsterlist := ListHostiles(caster, 20);
	if ( (monsterlist[1] != error) and (monsterlist[1] != {} ) )
		VS_AdjustVirtue(caster, "Valor", -1, 100);
	endif
	MoveObjectToLocation( caster, tox, toy, toz );

  PlaySoundEffect(caster, 0x1fd);
  return 1;
endprogram


// Legacy code for old style rune books.
// Must be eliminated at some point.
function removeentry(cast_on)
  var tox := CInt(GetObjProperty( cast_on, "x" ));
  var toy := CInt(GetObjProperty( cast_on, "y" ));
  var toz := CInt(GetObjProperty( cast_on, "z" ));
  var defs := GetObjProperty(cast_on, "runedefs");
  var holder := {};
  foreach thing in defs
    if((Cint(thing[2]) != tox) or (Cint(thing[3]) != toy) or (Cint(thing[4]) != toz))
      holder.append(thing);
    endif
  endforeach
  SetObjProperty(cast_on, "runedefs", holder);
  EraseObjProperty(cast_on, "x");
  EraseObjProperty(cast_on, "y");
  EraseObjProperty(cast_on, "z");
  return;
endfunction