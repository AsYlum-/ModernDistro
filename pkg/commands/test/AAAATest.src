//////////////////////////////////////////////////////////
// This program file is here to use for creating little //
// pieces of code for testing purposes.					//
//////////////////////////////////////////////////////////


use uo;
use cfgfile;
use file;
use os;
use polsys;
use basic;
use cliloc;

include "include/findCity";
//include "include/myUtil";
//include "util/bank";
include ":currency:currency";
include "include/string";
//include ":gumps:gumpMessage";
//include ":staticHousing:staticHousing";
include "include/packets";
include ":clilocs:clilocs";
//include "include/attributes";
include "include/server";
include ":virtue:virtue";
include ":timedScripts:timedScripts";
include ":timedScripts:poisonUtil";
include ":gumps:requestGump";

var poly_cfg := ReadConfigFile(":magery:poly");

program test_cmd(who, text)

	text := RequestGump(who, "Enter an integer key value");
	if(text.length() == 0)
		SendSysMessage(who, "Cancelled.", color := 33);
		return;
	endif
	var key_val := CInt(text);
	// var names_cfg := ReadConfigFile("::new_names");
	// var arr1 := GetConfigStringArray(names_cfg, "Names 1");
	var exist := FileExists(":commands:config/new_names.txt");
	if(!exist)
		Print("The file does not seem to exist");
		// return;
	endif
	var arr1 := ReadFile(":commands:config/new_names.txt");
	var arr2 := array;
	if(arr1.errortext)
		Print("arr1" + arr1.errortext);
		return;
	endif
	Print("arr1 size = " + arr1.size());
	// arr2 := arr2+arr1;
	var del_count := 0;
	foreach name in arr1
		if(name.length() == 0)
			continue;
		endif
		if(!(name in arr2))
			arr2.append(name);
		else
			del_count += 1;
		endif
	endforeach
	arr2.sort();
	Print(arr2);
	Print("arr2 size = " + arr2.size());
	Print("Duplicates deleted = " + del_count);
	var arr3 := array;
	foreach name in arr2
		arr3.append( {"Name" + CStr(_name_iter), name} );
	endforeach
	Print(arr3);
	AppendConfigFileElem( ":commands:config/new_names", "Names", key_val, arr3 );
	return;

	var bob := {"bob", "fred"};
	var fred := {"fred"};
	bob := bob-fred;
	Print(bob);
	return;

	var test := SplitWords(text);
	var group := test[1];
	var critter := test[2];
	var crit_name := "";
	var crit_graphic := 0;
	var crit_color := {};
	var critter_group := {};
	var keys := GetConfigStringKeys(poly_cfg);
	foreach key in keys
		var elem := FindConfigElem(poly_cfg, key);
		if(GetConfigInt(elem, "Level") == CInt(group))
			critter_group.append(elem);
		endif
	endforeach
	critter_group := GetGroup(group);
	foreach thing in critter_group
		crit_name := GetConfigString(thing, "Name");
		SendSysMessage(who, crit_name, color := 88);
	endforeach
	return;

endprogram

function GetGroup(group);

	var critters := {};
	var crit_keys := GetConfigStringKeys(poly_cfg);
	foreach key in crit_keys
		var elem := FindConfigElem(poly_cfg, key);
		if(GetConfigInt(elem, "Level") == CInt(group))
			critters.append(elem);
		endif
	endforeach
	return critters;

endfunction

function GetCritter(crit_list)



endfunction